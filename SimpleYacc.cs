// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.6
// Machine:  LEREENA-PC
// DateTime: 26.05.2020 2:26:58
// UserName: lereena
// Input file <SimpleYacc.y>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using ProgramTree;

namespace SimpleParser
{
public enum Tokens {
    error=1,EOF=2,BEGIN=3,END=4,CYCLE=5,ASSIGN=6,
    SEMICOLON=7,WHILE=8,DO=9,REPEAT=10,UNTIL=11,FOR=12,
    TO=13,WRITE=14,LB=15,RB=16,ARROW=17,IF=18,
    THEN=19,ELSE=20,VAR=21,COMMA=22,ADD=23,SUB=24,
    MULT=25,DIV=26,EQUAL=27,MORE=28,LESS=29,FUNC=30,
    COLON=31,INUM=32,RNUM=33,ID=34,BOOL=35};

public struct ValueType
{
public double dVal;
public int iVal;
public string sVal;
public bool bVal;
public Node nVal;
public ExprNode eVal;
public StatementNode stVal;
public BlockNode blVal;
public ParametersNode pVal;
public FactParametersNode fpVal;
}
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from SimpleYacc.y
public BlockNode root; //корневой узел синтаксического дерева
public FuncList funcs = new FuncList(); //таблица символов
public Parser(AbstractScanner<ValueType, LexLocation>
scanner) : base(scanner) { }
  // End verbatim content from SimpleYacc.y

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[46];
  private static State[] states = new State[97];
  private static string[] nonTerms = new string[] {
      "expr", "ident", "T", "F", "logic_op", "func", "assign", "statement", "cycle", 
      "while", "repeat", "for", "write", "if", "stlist", "block", "parameters", 
      "fact_parameters", "progr", "$accept", };

  static Parser() {
    states[0] = new State(new int[]{3,4,30,90},new int[]{-19,1,-16,3,-6,88});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{34,49,3,4,5,52,8,56,10,61,12,67,14,74,18,79},new int[]{-15,5,-8,87,-7,9,-2,10,-16,50,-9,51,-10,55,-11,60,-12,66,-13,73,-14,78});
    states[5] = new State(new int[]{4,6,7,7});
    states[6] = new State(-38);
    states[7] = new State(new int[]{34,49,3,4,5,52,8,56,10,61,12,67,14,74,18,79},new int[]{-8,8,-7,9,-2,10,-16,50,-9,51,-10,55,-11,60,-12,66,-13,73,-14,78});
    states[8] = new State(-10);
    states[9] = new State(-11);
    states[10] = new State(new int[]{6,11});
    states[11] = new State(new int[]{34,18,32,28,33,29,15,35,35,48},new int[]{-1,12,-5,47,-3,38,-4,39,-2,17,-17,30});
    states[12] = new State(new int[]{23,13,24,24,27,41,28,43,29,45,4,-20,7,-20,11,-20,20,-20,13,-20});
    states[13] = new State(new int[]{34,18,32,28,33,29,15,35},new int[]{-3,14,-4,39,-2,17,-17,30});
    states[14] = new State(new int[]{25,15,26,26,23,-27,24,-27,27,-27,28,-27,29,-27,4,-27,7,-27,11,-27,20,-27,13,-27,16,-27,9,-27,34,-27,3,-27,5,-27,8,-27,10,-27,12,-27,14,-27,18,-27});
    states[15] = new State(new int[]{34,18,32,28,33,29,15,35},new int[]{-4,16,-2,17,-17,30});
    states[16] = new State(-30);
    states[17] = new State(-32);
    states[18] = new State(new int[]{15,19,25,-19,26,-19,23,-19,24,-19,27,-19,28,-19,29,-19,4,-19,7,-19,11,-19,20,-19,13,-19,16,-19,9,-19,34,-19,3,-19,5,-19,8,-19,10,-19,12,-19,14,-19,18,-19,17,-5,22,-5});
    states[19] = new State(new int[]{34,18,32,28,33,29,15,35},new int[]{-18,20,-1,40,-3,38,-4,39,-2,17,-17,30});
    states[20] = new State(new int[]{16,21,7,22});
    states[21] = new State(-35);
    states[22] = new State(new int[]{34,18,32,28,33,29,15,35},new int[]{-1,23,-3,38,-4,39,-2,17,-17,30});
    states[23] = new State(new int[]{23,13,24,24,16,-8,7,-8});
    states[24] = new State(new int[]{34,18,32,28,33,29,15,35},new int[]{-3,25,-4,39,-2,17,-17,30});
    states[25] = new State(new int[]{25,15,26,26,23,-28,24,-28,27,-28,28,-28,29,-28,4,-28,7,-28,11,-28,20,-28,13,-28,16,-28,9,-28,34,-28,3,-28,5,-28,8,-28,10,-28,12,-28,14,-28,18,-28});
    states[26] = new State(new int[]{34,18,32,28,33,29,15,35},new int[]{-4,27,-2,17,-17,30});
    states[27] = new State(-31);
    states[28] = new State(-33);
    states[29] = new State(-34);
    states[30] = new State(new int[]{17,31,22,33});
    states[31] = new State(new int[]{3,4},new int[]{-16,32});
    states[32] = new State(-36);
    states[33] = new State(new int[]{34,34});
    states[34] = new State(-6);
    states[35] = new State(new int[]{34,18,32,28,33,29,15,35},new int[]{-1,36,-3,38,-4,39,-2,17,-17,30});
    states[36] = new State(new int[]{16,37,23,13,24,24});
    states[37] = new State(-37);
    states[38] = new State(new int[]{25,15,26,26,23,-26,24,-26,27,-26,28,-26,29,-26,4,-26,7,-26,11,-26,20,-26,13,-26,16,-26,9,-26,34,-26,3,-26,5,-26,8,-26,10,-26,12,-26,14,-26,18,-26});
    states[39] = new State(-29);
    states[40] = new State(new int[]{23,13,24,24,16,-7,7,-7});
    states[41] = new State(new int[]{34,18,32,28,33,29,15,35},new int[]{-1,42,-3,38,-4,39,-2,17,-17,30});
    states[42] = new State(new int[]{23,13,24,24,4,-23,7,-23,11,-23,20,-23,13,-23,9,-23,16,-23});
    states[43] = new State(new int[]{34,18,32,28,33,29,15,35},new int[]{-1,44,-3,38,-4,39,-2,17,-17,30});
    states[44] = new State(new int[]{23,13,24,24,4,-24,7,-24,11,-24,20,-24,13,-24,9,-24,16,-24});
    states[45] = new State(new int[]{34,18,32,28,33,29,15,35},new int[]{-1,46,-3,38,-4,39,-2,17,-17,30});
    states[46] = new State(new int[]{23,13,24,24,4,-25,7,-25,11,-25,20,-25,13,-25,9,-25,16,-25});
    states[47] = new State(-21);
    states[48] = new State(-22);
    states[49] = new State(-19);
    states[50] = new State(-12);
    states[51] = new State(-13);
    states[52] = new State(new int[]{34,18,32,28,33,29,15,35},new int[]{-1,53,-3,38,-4,39,-2,17,-17,30});
    states[53] = new State(new int[]{23,13,24,24,34,49,3,4,5,52,8,56,10,61,12,67,14,74,18,79},new int[]{-8,54,-7,9,-2,10,-16,50,-9,51,-10,55,-11,60,-12,66,-13,73,-14,78});
    states[54] = new State(-39);
    states[55] = new State(-14);
    states[56] = new State(new int[]{35,48,34,18,32,28,33,29,15,35},new int[]{-5,57,-1,65,-3,38,-4,39,-2,17,-17,30});
    states[57] = new State(new int[]{9,58});
    states[58] = new State(new int[]{34,49,3,4,5,52,8,56,10,61,12,67,14,74,18,79},new int[]{-8,59,-7,9,-2,10,-16,50,-9,51,-10,55,-11,60,-12,66,-13,73,-14,78});
    states[59] = new State(-40);
    states[60] = new State(-15);
    states[61] = new State(new int[]{34,49,3,4,5,52,8,56,10,61,12,67,14,74,18,79},new int[]{-8,62,-7,9,-2,10,-16,50,-9,51,-10,55,-11,60,-12,66,-13,73,-14,78});
    states[62] = new State(new int[]{11,63});
    states[63] = new State(new int[]{35,48,34,18,32,28,33,29,15,35},new int[]{-5,64,-1,65,-3,38,-4,39,-2,17,-17,30});
    states[64] = new State(-41);
    states[65] = new State(new int[]{27,41,23,13,24,24,28,43,29,45});
    states[66] = new State(-16);
    states[67] = new State(new int[]{34,49},new int[]{-7,68,-2,10});
    states[68] = new State(new int[]{13,69});
    states[69] = new State(new int[]{34,18,32,28,33,29,15,35},new int[]{-1,70,-3,38,-4,39,-2,17,-17,30});
    states[70] = new State(new int[]{9,71,23,13,24,24});
    states[71] = new State(new int[]{34,49,3,4,5,52,8,56,10,61,12,67,14,74,18,79},new int[]{-8,72,-7,9,-2,10,-16,50,-9,51,-10,55,-11,60,-12,66,-13,73,-14,78});
    states[72] = new State(-42);
    states[73] = new State(-17);
    states[74] = new State(new int[]{15,75});
    states[75] = new State(new int[]{34,18,32,28,33,29,15,35},new int[]{-1,76,-3,38,-4,39,-2,17,-17,30});
    states[76] = new State(new int[]{16,77,23,13,24,24});
    states[77] = new State(-43);
    states[78] = new State(-18);
    states[79] = new State(new int[]{15,80});
    states[80] = new State(new int[]{35,48,34,18,32,28,33,29,15,35},new int[]{-5,81,-1,65,-3,38,-4,39,-2,17,-17,30});
    states[81] = new State(new int[]{16,82});
    states[82] = new State(new int[]{19,83});
    states[83] = new State(new int[]{34,49,3,4,5,52,8,56,10,61,12,67,14,74,18,79},new int[]{-8,84,-7,9,-2,10,-16,50,-9,51,-10,55,-11,60,-12,66,-13,73,-14,78});
    states[84] = new State(new int[]{20,85,4,-44,7,-44,11,-44});
    states[85] = new State(new int[]{34,49,3,4,5,52,8,56,10,61,12,67,14,74,18,79},new int[]{-8,86,-7,9,-2,10,-16,50,-9,51,-10,55,-11,60,-12,66,-13,73,-14,78});
    states[86] = new State(-45);
    states[87] = new State(-9);
    states[88] = new State(new int[]{3,4,30,90},new int[]{-19,89,-16,3,-6,88});
    states[89] = new State(-3);
    states[90] = new State(new int[]{34,91});
    states[91] = new State(new int[]{15,92});
    states[92] = new State(new int[]{34,96},new int[]{-17,93});
    states[93] = new State(new int[]{16,94,22,33});
    states[94] = new State(new int[]{3,4},new int[]{-16,95});
    states[95] = new State(-4);
    states[96] = new State(-5);

    rules[1] = new Rule(-20, new int[]{-19,2});
    rules[2] = new Rule(-19, new int[]{-16});
    rules[3] = new Rule(-19, new int[]{-6,-19});
    rules[4] = new Rule(-6, new int[]{30,34,15,-17,16,-16});
    rules[5] = new Rule(-17, new int[]{34});
    rules[6] = new Rule(-17, new int[]{-17,22,34});
    rules[7] = new Rule(-18, new int[]{-1});
    rules[8] = new Rule(-18, new int[]{-18,7,-1});
    rules[9] = new Rule(-15, new int[]{-8});
    rules[10] = new Rule(-15, new int[]{-15,7,-8});
    rules[11] = new Rule(-8, new int[]{-7});
    rules[12] = new Rule(-8, new int[]{-16});
    rules[13] = new Rule(-8, new int[]{-9});
    rules[14] = new Rule(-8, new int[]{-10});
    rules[15] = new Rule(-8, new int[]{-11});
    rules[16] = new Rule(-8, new int[]{-12});
    rules[17] = new Rule(-8, new int[]{-13});
    rules[18] = new Rule(-8, new int[]{-14});
    rules[19] = new Rule(-2, new int[]{34});
    rules[20] = new Rule(-7, new int[]{-2,6,-1});
    rules[21] = new Rule(-7, new int[]{-2,6,-5});
    rules[22] = new Rule(-5, new int[]{35});
    rules[23] = new Rule(-5, new int[]{-1,27,-1});
    rules[24] = new Rule(-5, new int[]{-1,28,-1});
    rules[25] = new Rule(-5, new int[]{-1,29,-1});
    rules[26] = new Rule(-1, new int[]{-3});
    rules[27] = new Rule(-1, new int[]{-1,23,-3});
    rules[28] = new Rule(-1, new int[]{-1,24,-3});
    rules[29] = new Rule(-3, new int[]{-4});
    rules[30] = new Rule(-3, new int[]{-3,25,-4});
    rules[31] = new Rule(-3, new int[]{-3,26,-4});
    rules[32] = new Rule(-4, new int[]{-2});
    rules[33] = new Rule(-4, new int[]{32});
    rules[34] = new Rule(-4, new int[]{33});
    rules[35] = new Rule(-4, new int[]{34,15,-18,16});
    rules[36] = new Rule(-4, new int[]{-17,17,-16});
    rules[37] = new Rule(-4, new int[]{15,-1,16});
    rules[38] = new Rule(-16, new int[]{3,-15,4});
    rules[39] = new Rule(-9, new int[]{5,-1,-8});
    rules[40] = new Rule(-10, new int[]{8,-5,9,-8});
    rules[41] = new Rule(-11, new int[]{10,-8,11,-5});
    rules[42] = new Rule(-12, new int[]{12,-7,13,-1,9,-8});
    rules[43] = new Rule(-13, new int[]{14,15,-1,16});
    rules[44] = new Rule(-14, new int[]{18,15,-5,16,19,-8});
    rules[45] = new Rule(-14, new int[]{18,15,-5,16,19,-8,20,-8});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // progr -> block
{ root = ValueStack[ValueStack.Depth-1].blVal; }
        break;
      case 4: // func -> FUNC, ID, LB, parameters, RB, block
{ funcs.Add(ValueStack[ValueStack.Depth-5].sVal, new FuncDefNode(ValueStack[ValueStack.Depth-3].pVal,  ValueStack[ValueStack.Depth-1].blVal)); }
        break;
      case 5: // parameters -> ID
{ CurrentSemanticValue.pVal = new ParametersNode(ValueStack[ValueStack.Depth-1].sVal); }
        break;
      case 6: // parameters -> parameters, COMMA, ID
{ CurrentSemanticValue.pVal.Add(ValueStack[ValueStack.Depth-1].sVal); }
        break;
      case 7: // fact_parameters -> expr
{ CurrentSemanticValue.fpVal = new FactParametersNode(ValueStack[ValueStack.Depth-1].eVal); }
        break;
      case 8: // fact_parameters -> fact_parameters, SEMICOLON, expr
{ CurrentSemanticValue.fpVal.Add(ValueStack[ValueStack.Depth-1].eVal); }
        break;
      case 9: // stlist -> statement
{ CurrentSemanticValue.blVal = new BlockNode(ValueStack[ValueStack.Depth-1].stVal); }
        break;
      case 10: // stlist -> stlist, SEMICOLON, statement
{
            ValueStack[ValueStack.Depth-3].blVal.Add(ValueStack[ValueStack.Depth-1].stVal);
            CurrentSemanticValue.blVal = ValueStack[ValueStack.Depth-3].blVal;
        }
        break;
      case 11: // statement -> assign
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 12: // statement -> block
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].blVal; }
        break;
      case 13: // statement -> cycle
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 14: // statement -> while
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 15: // statement -> repeat
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 16: // statement -> for
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 17: // statement -> write
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 18: // statement -> if
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 19: // ident -> ID
{ CurrentSemanticValue.eVal = new IdNode(ValueStack[ValueStack.Depth-1].sVal); }
        break;
      case 20: // assign -> ident, ASSIGN, expr
{ CurrentSemanticValue.stVal = new AssignNode(ValueStack[ValueStack.Depth-3].eVal as IdNode, ValueStack[ValueStack.Depth-1].eVal); }
        break;
      case 21: // assign -> ident, ASSIGN, logic_op
{ CurrentSemanticValue.stVal = new AssignNode(ValueStack[ValueStack.Depth-3].eVal as IdNode, ValueStack[ValueStack.Depth-1].eVal); }
        break;
      case 22: // logic_op -> BOOL
{ CurrentSemanticValue.eVal = new BoolValNode(ValueStack[ValueStack.Depth-1].bVal);}
        break;
      case 23: // logic_op -> expr, EQUAL, expr
{ CurrentSemanticValue.eVal = new LogicOpNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, "=");}
        break;
      case 24: // logic_op -> expr, MORE, expr
{ CurrentSemanticValue.eVal = new LogicOpNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, ">");}
        break;
      case 25: // logic_op -> expr, LESS, expr
{ CurrentSemanticValue.eVal = new LogicOpNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, "<");}
        break;
      case 27: // expr -> expr, ADD, T
{CurrentSemanticValue.eVal = new NumOpNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, '+');}
        break;
      case 28: // expr -> expr, SUB, T
{CurrentSemanticValue.eVal = new NumOpNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, '-');}
        break;
      case 30: // T -> T, MULT, F
{CurrentSemanticValue.eVal = new NumOpNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, '*');}
        break;
      case 31: // T -> T, DIV, F
{CurrentSemanticValue.eVal = new NumOpNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, '/');}
        break;
      case 32: // F -> ident
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal as IdNode; }
        break;
      case 33: // F -> INUM
{ CurrentSemanticValue.eVal = new IntNumNode(ValueStack[ValueStack.Depth-1].iVal); }
        break;
      case 34: // F -> RNUM
{ CurrentSemanticValue.eVal = new RealNumNode(ValueStack[ValueStack.Depth-1].dVal); }
        break;
      case 35: // F -> ID, LB, fact_parameters, RB
{ CurrentSemanticValue.eVal = new FunNode(ValueStack[ValueStack.Depth-4].sVal, funcs, ValueStack[ValueStack.Depth-2].fpVal); }
        break;
      case 36: // F -> parameters, ARROW, block
{ CurrentSemanticValue.eVal = new FuncDefNode(ValueStack[ValueStack.Depth-3].pVal, ValueStack[ValueStack.Depth-1].blVal); }
        break;
      case 37: // F -> LB, expr, RB
{ CurrentSemanticValue.eVal = new NumOpNode(ValueStack[ValueStack.Depth-2].eVal, null, '('); }
        break;
      case 38: // block -> BEGIN, stlist, END
{ CurrentSemanticValue.blVal = ValueStack[ValueStack.Depth-2].blVal; }
        break;
      case 39: // cycle -> CYCLE, expr, statement
{ CurrentSemanticValue.stVal = new CycleNode(ValueStack[ValueStack.Depth-2].eVal, ValueStack[ValueStack.Depth-1].stVal); }
        break;
      case 40: // while -> WHILE, logic_op, DO, statement
{ CurrentSemanticValue.stVal = new WhileNode(ValueStack[ValueStack.Depth-3].eVal as LogicOpNode, ValueStack[ValueStack.Depth-1].stVal); }
        break;
      case 41: // repeat -> REPEAT, statement, UNTIL, logic_op
{ CurrentSemanticValue.stVal = new RepeatNode(ValueStack[ValueStack.Depth-1].eVal as LogicOpNode, ValueStack[ValueStack.Depth-3].stVal as StatementNode); }
        break;
      case 42: // for -> FOR, assign, TO, expr, DO, statement
{ CurrentSemanticValue.stVal = new ForNode(ValueStack[ValueStack.Depth-5].stVal as AssignNode, ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].stVal); }
        break;
      case 43: // write -> WRITE, LB, expr, RB
{ CurrentSemanticValue.stVal = new WriteNode(ValueStack[ValueStack.Depth-2].eVal); }
        break;
      case 44: // if -> IF, LB, logic_op, RB, THEN, statement
{ CurrentSemanticValue.stVal = new IfNode(ValueStack[ValueStack.Depth-4].eVal as LogicOpNode, ValueStack[ValueStack.Depth-1].stVal); }
        break;
      case 45: // if -> IF, LB, logic_op, RB, THEN, statement, ELSE, statement
{ CurrentSemanticValue.stVal = new IfNode(ValueStack[ValueStack.Depth-6].eVal as LogicOpNode, ValueStack[ValueStack.Depth-3].stVal, ValueStack[ValueStack.Depth-1].stVal); }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
